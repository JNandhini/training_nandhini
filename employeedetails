#pragma once
#include<iostream>
#include <vector>
#include<string>
using namespace std;
class employee
{
public:
	int id = 101;
	int size = 0;
	string name;
	int year=0;
	float pay=0.0;
	string department;
	vector<int> EmpId;
	vector<string> EmpName;
	vector <int> EmpYear;
	vector <float> EmpPay;
	vector <string> EmpDepartment;
	vector<int>::iterator count;
 public:
	 void validate_year();
	 void validate_strings();
	 
};
#include "employee.h"

void employee::validate_year()
{
	if ((year >= 1900 && year <= 2017))
		{
			EmpYear.push_back(year);
		}
		else
		{
			cin.clear();
			cout << "wrong input  ";
			cout << endl;
			cout << "Enter the year correctly";
			cin >> year;
		}
	
	}
void employee::validate_strings()
{
	if (sizeof(name) > 3)
	{

		cout << endl;
	}
	else
	{
		cin.clear();
		cout << "\nenter the name ";
		cin >> name;

	}
}#pragma once

#include<iostream>

#include<vector>

#include<string>

using namespace std;

class queueclass

{

public:

	int size = 0;

	int iterat = 0;

	vector<string> BenchList;

	vector<string> ProjectList;

	string InBench;

	string InProject;

	string EmployeeToBench;

	string EmployeeToProject;

public:

	void get_details();

	void display();

	void from_bench_to_project();

	void from_project_to_bench();

	void after_queue();


};
#include "queueclass.h"

　
void queueclass::get_details()
{
	cout << "Enter the size";
	cin >> size;
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "Enter the employee in bench\n";
		cin >> InBench;
		BenchList.push_back(InBench);
		cout << "Enter the employee in project\n";
		cin >> InProject;
		ProjectList.push_back(InProject);

	}

}
void queueclass::display()
{
	
	cout << endl;
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The bench List is\n";
		cout << BenchList.at.InBench(iterat);

	}
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The project List is\n";
		cout << ProjectList.at.InProject(iterat);

	}
}
void queueclass::from_bench_to_project()
{
	EmployeeToBench = ProjectList.back();
	cout << EmployeeToBench;
	ProjectList.pop_back();
	}
void queueclass::from_project_to_bench()
{
	EmployeeToProject = BenchList.back();
	cout << EmployeeToProject;
	BenchList.pop_back();
	BenchList.push_back(EmployeeToBench);
}
void queueclass::after_queue()
{
	ProjectList.push_back(EmployeeToProject);
	cout << endl;
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The bench List is\n";
		cout << BenchList.at.InBench(iterat);

	}
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The project List is\n";
		cout << ProjectList.at.InProject(iterat);

	}
}
#include "queueclass.h"

　
void queueclass::get_details()
{
	cout << "Enter the size";
	cin >> size;
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "Enter the employee in bench\n";
		cin >> InBench;
		BenchList.push_back(InBench);
		cout << "Enter the employee in project\n";
		cin >> InProject;
		ProjectList.push_back(InProject);

	}

}
void queueclass::display()
{
	
	cout << endl;
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The bench List is\n";
		cout << BenchList.at.InBench(iterat);

	}
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The project List is\n";
		cout << ProjectList.at.InProject(iterat);

	}
}
void queueclass::from_bench_to_project()
{
	EmployeeToBench = ProjectList.back();
	cout << EmployeeToBench;
	ProjectList.pop_back();
	}
void queueclass::from_project_to_bench()
{
	EmployeeToProject = BenchList.back();
	cout << EmployeeToProject;
	BenchList.pop_back();
	BenchList.push_back(EmployeeToBench);
}
void queueclass::after_queue()
{
	ProjectList.push_back(EmployeeToProject);
	cout << endl;
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The bench List is\n";
		cout << BenchList.at.InBench(iterat);

	}
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The project List is\n";
		cout << ProjectList.at.InProject(iterat);

	}
}
#include "queueclass.h"

　
void queueclass::get_details()
{
	cout << "Enter the size";
	cin >> size;
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "Enter the employee in bench\n";
		cin >> InBench;
		BenchList.push_back(InBench);
		cout << "Enter the employee in project\n";
		cin >> InProject;
		ProjectList.push_back(InProject);

	}

}
void queueclass::display()
{
	
	cout << endl;
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The bench List is\n";
		cout << BenchList.at.InBench(iterat);

	}
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The project List is\n";
		cout << ProjectList.at.InProject(iterat);

	}
}
void queueclass::from_bench_to_project()
{
	EmployeeToBench = ProjectList.back();
	cout << EmployeeToBench;
	ProjectList.pop_back();
	}
void queueclass::from_project_to_bench()
{
	EmployeeToProject = BenchList.back();
	cout << EmployeeToProject;
	BenchList.pop_back();
	BenchList.push_back(EmployeeToBench);
}
void queueclass::after_queue()
{
	ProjectList.push_back(EmployeeToProject);
	cout << endl;
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The bench List is\n";
		cout << BenchList.at.InBench(iterat);

	}
	for (iterat = 0; iterat < size; iterat++)
	{
		cout << "The project List is\n";
		cout << ProjectList.at.InProject(iterat);

	}
}

#pragma once
#include<vector>
#include "employee.h"
class organization
{
public:
	employee employ;
	int iterat=0;
    public:
	void employe_details();
    void name_by_year();
	void highest_pay();
	void display_by_ascending_order();
	void update_pay();
	
	
};#include "organization.h"

#include<vector>

void organization::employe_details()

{ 

	    cout << "Enter the details of the employee\n";

		employ.EmpId.push_back(employ.id);

		cout << "Enter the employee name\n";

		cin >> employ.name;

		employ.EmpName.push_back(employ.name);

		cout << "Enter the employee year\n";

		cin >> employ.year;

		employ.validate_year();

		cout << "Enter the employee pay\n";

		cin >> employ.pay;

		employ.EmpPay.push_back(employ.pay);

		cout << "Enter the employee department\n";

		cin >> employ.department;

		employ.EmpDepartment.push_back(employ.department);

		employ.id = employ.id++;

	

}


void organization::name_by_year()

{

	int Year;

    cout << "Enter the year of joining";

	cin >> Year;

	employ.validate_year();

	cout << endl;

	for (iterat = 0; iterat < employ.EmpId.size(); iterat++)

	{

		if (employ.EmpYear.at(iterat) == Year)

		{

			cout << employ.EmpName.at(iterat);

		}

	}

}

void organization::highest_pay()

{

	string Department;

	static float temp = 0.0;

	int index = 0;

	cout << "Enter the Department of the employee\n";

	cin >> Department;

	cout << endl;

	for (iterat = 0; iterat < employ.EmpId.size(); iterat++)

	{

		if (employ.EmpDepartment.at(iterat) == Department)

		{

			if (employ.EmpPay.at(iterat)>temp)

			{

				temp = employ.EmpPay.at(iterat);

				index = iterat;

			}


		}

	}

		    cout << "EMP";

			cout << employ.EmpId.at(index);

			cout << "\nthe employee name\t";

			cout << employ.EmpName.at(index);

			cout << "\n";

			cout << "the employee year\t";

			cout << employ.EmpYear.at(index);

			cout << "\n";

			cout << "the employee pay\t";

			cout << employ.EmpPay.at(index);

			cout << "\n";

			cout << "the employee department\t";

			cout << employ.EmpDepartment.at(index);

			cout << "\n";

		

	

}

void organization::display_by_ascending_order()

{ 

	

	for (iterat =0; iterat < employ.EmpId.size(); iterat++)

	{

			cout << "EMP";

			cout << employ.EmpId.at(iterat);

			cout << "The employee name\t";

			cout << employ.EmpName.at(iterat);

			cout << "\n";

			cout << "The employee year\t";

			cout << employ.EmpYear.at(iterat);

			cout << "\n";

			cout << "The employee pay\t";

			cout << employ.EmpPay.at(iterat);

			cout << "\n";

			cout << "The employee department\t";

			cout << employ.EmpDepartment.at(iterat);

			cout << "\n";


		

	}

}


void organization::update_pay()

{

	int Id;

	cout << "Enter the Id of the employee";

	cin >> Id;

	cout << endl;

	for (iterat = 0; iterat <employ.EmpId.size(); iterat++)

	{

		if (employ.EmpId.at(iterat) == Id)

		{

			cout << endl;

			cout <<employ.EmpPay.at(iterat);

			employ.EmpPay.at(iterat) = (105 * employ.EmpPay.at(iterat)) / 100;

			cout << endl;

			cout << employ.EmpPay.at(iterat);

		}

		else

		{

			cout << "The Id is invalid";

		}

	}

}

int main()

{


	organization organize;

	employee employ;

	char choice;

     	cout << "a.Display employee name by particaular year\nb.Display all details by department with highest pay \nc.Display all details by ascending order\nd.update pay by particaular id\ne.priority list\nf.exit";

		while (1)

		{

			cout << "enter the choice";

			cin >> choice;

			cout << endl;


			switch (choice)

			{

			case 'a':

				organize.employe_details();

					break;

			case 'b':

				organize.name_by_year();

				break;

			case 'c':

				organize.highest_pay();

				break;

			case 'd':

				organize.display_by_ascending_order();

				break;

			case 'e':

				organize.update_pay();

				break;

			case 'f':

				exit(1);

			}


		}

}
