#pragma once
#include "employee.h"
class organization
{
public:
	employee emp;
	int iterat=0;
	int size = 0;
public:
	void employe_details();
    void name_by_year();
	void highest_pay();
	void display_by_ascending_order();
	void update_pay();
	
	
};#pragma once

#include<iostream>

#include <vector>

#include<string>

using namespace std;

class employee

{

public:

	int id = 101;

	int size = 0;

	string name;

	int year=0;

	float pay=0.0;

	string department;

	vector<int> EmpId;

	vector<string> EmpName;

	vector <int> EmpYear;

	vector <float> EmpPay;

	vector <string> EmpDepartment;

	vector<int>::iterator count;

 public:

	 void details();

	 void display();

	 

};

#include "employee.h"

void employee::details()
{
	cout << "Enter the details of the employee\n";
	EmpId.push_back(id);
	cout << "Enter the employee name\n";
	cin >> name;
	EmpName.push_back(name);
	cout << "Enter the employee year\n";
	cin >> year;
	EmpYear.push_back(year);
	cout << "Enter the employee pay\n";
	cin >> pay;
	EmpPay.push_back(pay);
	cout << "Enter the employee department\n";
	cin >> department;
	EmpDepartment.push_back(department);
	id = id++;
	
}
void employee::display()
{
	for (int iterate = 0; iterate <size; iterate++)
	{
		cout << "The details of the employee";
		cout << endl;
		cout << "EMP";
		cout << EmpId.at(iterate);
		cout << "the employee name\t";
		cout<<EmpName.at(iterate);
		cout << "\t";
		cout << "Enter the employee year\t";
		cout<<EmpYear.at(iterate);
		cout << "\t";
		cout << "Enter the employee pay\t";
		cout<<EmpPay.at(iterate);
		cout << "\t";
		cout << "Enter the employee department\t";
		cout<<EmpDepartment.at(iterate);
		cout << "\t";
		id = id++;
	}
}#include "organization.h"

void organization::employe_details()

{

	cout << "Enter the size";

	cin >> size;

	for (iterat = 0; iterat < size; iterat++)

	{

		cout << "Enter the details of the employee\n";

		emp.EmpId.push_back(emp.id);

		cout << "Enter the employee name\n";

		cin >> emp.name;

		emp.EmpName.push_back(emp.name);

		cout << "Enter the employee year\n";

		cin >> emp.year;

		emp.EmpYear.push_back(emp.year);

		cout << "Enter the employee pay\n";

		cin >> emp.pay;

		emp.EmpPay.push_back(emp.pay);

		cout << "Enter the employee department\n";

		cin >> emp.department;

		emp.EmpDepartment.push_back(emp.department);

		emp.id = emp.id++;

	}

	}

void organization::name_by_year()

{

	int Year;

    cout << "Enter the year of joining";

	cin >> Year;

	cout << endl;

	for (iterat = 0; iterat < size; iterat++)

	{

		if (emp.EmpYear.at(iterat) == Year)

		{

			cout << emp.EmpName.at(iterat);

		}

		else

		{

			cout << "invalid year";

		}

	}

}

void organization::highest_pay()

{

	string Department;

	cout << "Enter the Department of the employee";

	cin >> Department;

	cout << endl;

	for (iterat = 0; iterat < size; iterat++)

	{

		if (emp.EmpDepartment.at(iterat) == Department)

		{

			cout << "EMP";

			cout << emp.EmpId.at(iterat);

			cout << "the employee name\t";

			cout << emp.EmpName.at(iterat);

			cout << "\n";

			cout << "the employee year\t";

			cout << emp.EmpYear.at(iterat);

			cout << "\n";

			cout << "the employee pay\t";

			cout << emp.EmpPay.at(iterat);

			cout << "\n";

			cout << "Enter the employee department\t";

			cout << emp.EmpDepartment.at(iterat);

			cout << "\n";


		}

	


	}

}

void organization::display_by_ascending_order()

{

	

	for (iterat = 0; iterat < (int)emp.EmpId.size(); iterat++)

	{

			cout << "EMP";

			cout << emp.EmpId.at(iterat);

			cout << "The employee name\t";

			cout << emp.EmpName.at(iterat);

			cout << "\n";

			cout << "The employee year\t";

			cout <<emp.EmpYear.at(iterat);

			cout << "\n";

			cout << "The employee pay\t";

			cout << emp.EmpPay.at(iterat);

			cout << "\n";

			cout << "The employee department\t";

			cout << emp.EmpDepartment.at(iterat);

			cout << "\n";


		

	}

}


void organization::update_pay()

{

	int Id;

	cout << "Enter the Id of the employee";

	cin >> Id;

	cout << endl;

	for (iterat = 0; iterat <size; iterat++)

	{

		if (emp.EmpId.at(iterat) == Id)

		{

			cout << endl;

			cout <<emp.EmpPay.at(iterat);

			emp.EmpPay.at(iterat) = (105 * emp.EmpPay.at(iterat)) / 100;

			cout << endl;

			cout << emp.EmpPay.at(iterat);

		}

	}

}

int main()

{


	organization organize;

	employee emp;

	char choice;

	int size = 0;

     	cout << "a.Display employee name by particaular year\nb.Display all details by department with highest pay \nc.Display all details by ascending order\nd.update pay by particaular id\ne.priority list\nf.exit";

		while (1)

		{

			cout << "enter the choice";

			cin >> choice;

			cout << endl;


			switch (choice)

			{

			case 'a':

			    emp.details();

				break;

			case 'b':

				organize.name_by_year();

				break;

			case 'c':

				organize.highest_pay();

				break;

			case 'd':

				organize.display_by_ascending_order();

				break;

			case 'e':

				organize.update_pay();

				break;

			case 'f':

				exit(1);

			}


		}

}
