#pragma once
#include<iostream>
#include<string>
class node
{
public:
	int price = 0;
	string name;
	node *left;
	node *right;
	int height = 0;
	node();
	~node();
};
#pragma once
#include<iostream>
#include <string>
#include"node.h"
class tree
{
public:
	int iterat = 0;

	node *root;
public:
	node insert(int cost, string name,node *point);
	void display();
	node rotate_right(node *point);
	node rotate_left(node *point);
	node left_left_rotate(node *point);
	node left_right_rotate(node *point);
	node right_right_rotate(node *point);
	node right_left_rotate(node *point);
	node height(node *point);
	void mirror_copy();
	void inorder();
	void no_of_products();

　
	tree();
	~tree();
};
#include "tree.h"

　
node tree::insert(int cost, string name,node *point)
{
	if (point == NULL)
	{
		point = new node;
		point->price = cost;
		point->name[100] = name[100];
		point->left = NULL;
		point->right = NULL;
		point->height = 0;

	}
	else if (cost < point->price)
	{
		point->left = insert(cost,name,point->left);

	}
	else
	{
		point->right = insert(cost, name, point->right);
	}
}

node rotate_left(node *point)
{
	node *rotate;
	rotate = point->right;
	point->right = point->left;
	point->left = rotate;

}#pragma once
#include<iostream>
#include <string>
#include"node.h"
class tree
{
public:
	int iterat = 0;

	node *root;
public:
	node insert(int cost, string name,node *point);
	void display();
	node rotate_right(node *point);
	node rotate_left(node *point);
	node left_left_rotate(node *point);
	node left_right_rotate(node *point);
	node right_right_rotate(node *point);
	node right_left_rotate(node *point);
	node height(node *point);
	void mirror_copy();
	void inorder();
	void no_of_products();

　
	tree();
	~tree();
};
