7.	A CustomVector class is defined as follows: 
class CustomVector {
 public: 
// constructors and other public interface goes here 
private: 
// private data 
std::vector< double> elements; 
int length; 
};

(a) Design and code three constructors: 
(i) a constructor: that takes a single integer that indicates the size of vector; 
(ii) a constructor: that takes a length integer and an array of doubles to initialise the values; 
(iii) a copy constructor. 
(b) Give a example usage of each. 
(c) Explain the problem that would arise if we used dynamic memory allocation (C++-style new or C-style malloc) instead of using std::vector<> 
(d) What mechanism shall be used to overcome the problems arising in part (c)?
(e) For CustomVector class, show how the square brackets operator (indexing operator) can be overloaded to return a given indexed element. Should this operator be a class member function, and if so will it be private or public


a construtor 
#include <iostream>

using namespace std;

#include<vector>


class CustomVector {
public:
CustomVector(vector<int> vec)
{

  //returning the size of the vector

cout<<"size of vector \n"<<vec.size();
}
CustomVector(int length)
{
    length=length*length;
    cout<<"Length is\n"<<length;
}
CustomVector(vector<int> length,vector<double> elements)
{


  //values of array elements
  
  elements.push_back(10);
  elements.push_back(20);
  elements.push_back(30);
  elements.push_back(40);
  cout<<"\nvector elements\n";
  cout<<elements[1];
  cout<<endl;
  cout<<elements[2];
  cout<<endl;
  cout<<elements[3];
  cout<<endl;
  cout<<elements.back();
}
CustomVector(const CustomVector &vecto)
{

  //copy constructor displaying the length

    length=vecto.length;
    cout<<"\nCopy constructor";
}


private: 
// private data 
vector< double> elements; 
int length; 
vector<int> vec;
};

int main()
{
   
   CustomVector(vector<int> (4));
   CustomVector(vector<int>(4),vector<double> (1));
   CustomVector vecto(9);
   CustomVector copy=vecto;
}

b
example usage
copy constructor used to copy all the values of all  the  variable from object to another object

c
The dynamic memory allocates memory on heap and it causes a memory leak when the pointer variable is not freed but vector allocates the object on stack and elements on heap.
So,it automatically deallocates the memory.The dynamic memory are not  contiguous memory.But vector allocates the contiguous memory.

d 
The problem can be solved by freeing the memory by using the free method.

e
#include <iostream>

using namespace std;

#include<vector>


class Vecto {
    public:
        int& operator[] (int);    
        
        // declaring operator function
        
        private:
        int value;
};

int& Vecto::operator[] (int copy) {  

       // function operator

    std::cout << "Opertor overloading\n";
    return  value;
}

int main () {
    Vecto vec;
    vec[0]=10;
   
       //calling the operator function
   
    std::cout << vec[0]+10 << '\n';
    return 0;
}
